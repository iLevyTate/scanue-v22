---
description: 
globs: 
alwaysApply: true
---
Development rules:

Encapsulation & Information Hiding: Direct AI to avoid exposing unnecessary details to users. Promote modular design by keeping interfaces simple and hiding complex internals.

Error-Free Interfaces: Minimize errors by handling edge cases and reducing exception requirements within interfaces.

Prioritize Readability: Code should be optimized for clarity and future maintenance, even if it takes longer to write. Avoid overly complex or obscure constructs.

Consistent Naming Conventions: Enforce clear, descriptive naming for variables, classes, and functions. Avoid vague or non-specific terms.

General vs. Special Purpose Code: Separate reusable, general-purpose modules from specific implementations, improving modularity and reducing dependencies.

Limit Global State: Favor local variables and parameter-passing to maintain a modular and adaptable codebase.

Design Iteration: AI should suggest multiple solutions for complex problems, choosing the one that balances simplicity with robustness.

Intentional Comments Only: Use comments sparingly to clarify non-obvious logic. Avoid redundant comments that merely restate the code.

Formatting and Syntax
Structure Files: Direct AI to structure files into sections: main components, helpers, types, and subcomponents.

Modularity First: Encourage concise, self-contained modules to keep code focused on single responsibilities and to avoid pass-through methods.
