---
description: 
globs: 
alwaysApply: true
---
# Test-Driven Development (TDD) Rules: Red-Green-Refactor

## 1. RED: Write a Failing Test First
- **Requirement:** Before writing *any* implementation code for a new feature or bug fix, a corresponding test must be written.
- **AI Task (if asked for new feature):** Generate a concise, atomic `pytest` test case first. This test should clearly verify the specific requirement and **must fail** initially (as the implementation doesn't exist yet).
- **Test Location:** Place new tests in the relevant file within the `tests/` directory.
- **Test Naming:** Test functions must start with `test_`. Test classes should follow the pattern `Test[ClassName]`.
- **Atomic Tests:** Each test should verify only one specific behavior or requirement. Avoid tests that check multiple unrelated things.

## 2. GREEN: Write Minimal Code to Pass
- **Requirement:** Once a failing test exists, write the *absolute minimum* amount of implementation code required to make that specific test pass.
- **AI Task (if given a failing test):** Generate only the necessary code changes in the source file(s) to pass the specified test. Do not add extra functionality, optimizations, or unrelated changes at this stage.
- **Verification:** After applying the code, all tests (new and existing) must pass.

## 3. REFACTOR: Improve Code Quality
- **Requirement:** After the test passes, refactor the newly added implementation code (and potentially related code) to improve clarity, design, and efficiency *without changing its observable behavior*.
- **AI Task (if asked to refactor):** Clean up the code, improve variable names, extract methods where appropriate, ensure adherence to other design principles (like those in `philofsoftware.mdc`if applicable), and simplify logic.
- **Verification:** Ensure all tests *still pass* after refactoring. Refactoring should never break existing tests.

## General TDD Guidelines
- **Cycle Adherence:** Always follow the Red-Green-Refactor cycle in order. Do not skip steps.
- **Small Steps:** Work in small, incremental steps. Write a single test, make it pass, refactor, then repeat.
- **Test Isolation:** Ensure tests are independent and do not rely on the state or outcome of other tests. Use mocking (e.g., `unittest.mock`, `pytest-mock`) appropriately to isolate units under test, especially when dealing with external calls like LLMs.
- **Readability:** Both test code and implementation code should be clear and readable, following conventions defined in `philofsoftware.mdc` where applicable.